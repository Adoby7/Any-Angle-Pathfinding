Basic ThetaStar is a lot faster with parent optimisation.
It also has no difference in final path length.

A*, A*PS is faster than theta* on denser graphs.
Reason: Theta* has to perform line-of-sight checks during operation, which is O(dx+dy)
Theta* is runs a lot faster in sparse graphs.
Reason: The heuristic. In denser graphs the search trees are more similar. In sparse graphs, the heuristic makes more of a difference due to the direct-ness of paths. A weaker (lower c) heuristic means the search tree will be much wider, causing a longer running time.
In Theta*, the distances are a lot lower than in A*, so the heuristic makes a much larger difference in a Theta*. We can see the difference in the search trees.

Why heuristic matters so much: Compare A* with Dijkstra's similar algorithms. Dijkstra's running time increases with sparseness, A*'s running time decreases with sparseness.


Triangle Inequality optimisation does not make A*PS faster - it slightly increases the running time due to the additional check.

Triangle Inequality optimisation consistently makes Theta* faster.


Having a high heuristic causes a significant drop in running time (by a factor of 3-4), but increases the path length greatly.


Adding the Post-Smoothing step makes little difference in the overall runtime. Thus post-smoothing can be applied to Theta* with little running time cost. There is a slight increase in path length, although small.


BFS is the fastest.


Maze 1: 30x30, 37.5% blocked
Maze 2: 30x30, 20.7% blocked
Maze 3: 30x30, 6.5% blocked
Maze 4: 100x100, 40.5% blocked
Maze 5: 100x100, 20.6% blocked
Maze 6: 100x100, 6.4% blocked
Maze 7: 500x500, 41% blocked
Maze 8: 500x500, 6.5% blocked